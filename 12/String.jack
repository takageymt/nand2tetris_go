// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int maxLen;
    field int len;
    field Array s;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }
        let maxLen = maxLength;
        let len = 0;
        let s = Array.new(maxLen+1);
        let s[0] = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do s.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | ~(j < len)) {
            do Sys.error(15);
        }
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | ~(j < len)) {
            do Sys.error(16);
        }
        let s[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len = maxLen) {
            do Sys.error(17);
        }
        let s[len] = c;
        let s[len+1] = 0;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len = 0) {
            do Sys.error(18);
        }
        let len = len - 1;
        let s[len] = 0;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean neg;
        var int n, i;
        let n = 0;
        let i = 0;
        if (s[0] = 45) {
            let neg = true;
            let i = i + 1;
        } else {
            let neg = false;
        }
        while ((i < len) & ~(s[i] < 48) & (s[i] < 57)) {
            let n = n*10 + (s[i]-48);
            let i = i + 1;
        }
        if (neg) {
            return -n;
        }
        return n;
    }

    method void _setInt(int val) {
        var int rem;
        if (len = maxLen) {
            do Sys.error(19);
        }
        if (val > 9) {
            do _setInt(val/10);
        }
        let rem = val - ((val/10)*10);
        do appendChar(rem + 48);
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;
        let s[0] = 0;

        if (len = maxLen) {
            do Sys.error(19);
        }
        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }

        do _setInt(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
