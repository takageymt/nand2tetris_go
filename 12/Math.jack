
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static int divSum;
    static Array pow2;

    /** Initializes the library. */
    function void init() {
        var int i;
            
        let pow2 = Array.new(16);
        let pow2[0] = 1;
        let i = 1;
        while (i < 16) {
            let pow2[i] = pow2[i-1]+pow2[i-1];
            let i = i+1;
        }
        return;
    }

    function int bit(int x) {
        return pow2[x];
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, i;
        let sum = 0;
        let i = 0;
        while (i < 16) {
            if (y & Math.bit(i)) {
                let sum = sum + x;
            }
            let x = x + x;
            let i = i + 1;
        }
        return sum;
    }

    function int _divide(int x, int y) {
        var int q;
        if ((x < y) | (y < 0)) {
            return 0;
        }
        let q = Math._divide(x, y+y);
        if (x-divSum < y) {
            return q+q;
        }
        let divSum = divSum + y;
        return (q+q) + 1;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean neg;
        var int q;
        if (y = 0) {
            do Sys.error(3);
        }
        if (((x > 0) & (y < 0)) | ((x < 0) & (y > 0))) {
            let neg = true;
        } else {
            let neg = false;
        }
        let x = Math.abs(x);
        let y = Math.abs(y);

        let divSum = 0;

        let q = Math._divide(x, y);
        if (neg) {
            return -q;
        }
        return q;
    }

    function int remain(int x, int y) {
        // x%y
        return x - ((x/y)*y);
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, s;

        if (x < 0) {
            do Sys.error(4);
        }

        let y = 0;
        let i = 7;
        while (~(i < 0)) {
            let s = (y+pow2[i])*(y+pow2[i]);
            if ((s > 0) & ~(s > x)) {
                let y = y+pow2[i];
            }
            let i = i-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        }
        return a;
    }
}
