// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int SCN;
    static int NROWS;
    static int NCOLS;
    static int NWORDS;
    static int clr;

    /** Initializes the Screen. */
    function void init() {
        let SCN = 16384;
        let NROWS = 256;
        let NCOLS = 512;
        let NWORDS = 32;
        let clr = -1;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i, j;
        let i = 0;
        let j = 0;
        do Screen.setColor(false);
        while (i < NROWS) {
            while (j < NWORDS) {
                do Memory.poke(SCN+(i*NWORDS)+j, 0);
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b) {
            let clr = -1;
        } else {
            let clr = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int mem, rem, addr;
        if ((x < 0) | ~(x < NCOLS) | (y < 0) | ~(y < NROWS)) {
            do Sys.error(7);
        }
        let rem = x & 15;
        let addr = SCN + (y*NWORDS) + (x/16);
        let mem = Memory.peek(addr);
        if (clr = 0) {
            do Memory.poke(addr, mem & (~Math.bit(rem)));
        } else {
            do Memory.poke(addr, mem | Math.bit(rem));
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int mx, Mx, my, My;
        var int flag;

        if ((x1 < 0) | ~(x1 < NCOLS) | (y1 < 0) | ~(y1 < NROWS)) {
            do Sys.error(8);
        }
        if ((x2 < 0) | ~(x2 < NCOLS) | (y2 < 0) | ~(y2 < NROWS)) {
            do Sys.error(8);
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        if ((dx = 0) | (dy = 0)) {
            if (dx = 0) {
                let my = Math.min(y1, y2);
                let My = Math.max(y1, y2);
                while (my < My) {
                    do Screen.drawPixel(x1, my);
                    let my = my + 1;
                }
            } else {
                let mx = Math.min(x1, x2);
                let Mx = Math.max(x1, x2);
                while (mx < Mx) {
                    do Screen.drawPixel(mx, y1);
                    let mx = mx + 1;
                }
            }
        } else {
            if (((dx < 0) & (dy < 0)) | ((dx > 0) & (dy > 0))) {
                if (x1 > x2) {
                    let mx = x2;
                    let my = y2;
                    let Mx = x1;
                    let My = y1;
                    let dx = -dx;
                    let dy = -dy;
                } else {
                    let mx = x1;
                    let my = y1;
                    let Mx = x2;
                    let My = y2;
                }
                let flag = 0;
                while (~(mx > Mx) & ~(my > My)) {
                    do Screen.drawPixel(mx, my);
                    if (flag < 0) {
                        let mx = mx + 1;
                        let flag = flag + dy;
                    } else {
                        let my = my + 1;
                        let flag = flag - dx;
                    }
                }
            } else {
                if (x1 > x2) {
                    let mx = x2;
                    let my = y2;
                    let Mx = x1;
                    let My = y1;
                    let dx = -dx;
                    let dy = -dy;
                } else {
                    let mx = x1;
                    let my = y1;
                    let Mx = x2;
                    let My = y2;
                }
                let flag = 0;
                while (~(mx > Mx) & ~(my < My)) {
                    do Screen.drawPixel(mx, my);
                    if (flag > 0) {
                        let mx = mx + 1;
                        let flag = flag + dy;
                    } else {
                        let my = my - 1;
                        let flag = flag + dx;
                    }
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int t;

        if ((x1 < 0) | ~(x1 < NCOLS) | (y1 < 0) | ~(y1 < NROWS)) {
            do Sys.error(9);
        }
        if ((x2 < 0) | ~(x2 < NCOLS) | (y2 < 0) | ~(y2 < NROWS)) {
            do Sys.error(9);
        }

        if (y1 > y2) {
            let t = y1;
            let y1 = y2;
            let y2 = t;
        }
        while (~(y1 > y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int r2;
        var int dx, dy;
        var int t;

        if ((x < 0) | ~(x < NCOLS) | (y < 0) | ~(y < NROWS)) {
            do Sys.error(12);
        }
        if (~(r > 0) | ((x-r) < 0) | ~((x+r) < NCOLS) | ((y-r) < 0) | ~((y+r) < NROWS)) {
            do Sys.error(13);
        }

        let r2 = r*r;

        let dy = -r;

        while (~(dy > r)) {
            let dx = Math.sqrt(r2 - (dy*dy));
            do Screen.drawLine(x-dx, y+dy, x+dx, y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
